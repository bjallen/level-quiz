require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/quiz_guesses", type: :request do
  before(:each) do
    user = User.create(email: "asdf", provider: "qwer", uid: "123")
    sign_in(user)
  end

  # This should return the minimal set of attributes required to create a valid
  # QuizGuess. As you add validations to QuizGuess, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    pillar = Pillar.create!(name: "a")
    competency = Competency.create!(name: "b", pillar: pillar)
    level = Level.create!(name: "c")
    behavior = Behavior.create!(description: "behavior", competency: competency, level: level)
    {
      behavior_id: behavior.id,
      competency_id: competency.id,
      level_id: level.id
    }
  }

  let(:invalid_attributes) {
    pillar = Pillar.create!(name: "a")
    competency = Competency.create!(name: "b", pillar: pillar)
    level = Level.create!(name: "c")
    behavior = Behavior.create!(description: "behavior", competency: competency, level: level)
    {
      behavior_id: behavior.id,
      competency_id: competency.id,
      level_id: nil
    }
  }

  describe "GET /show" do
    it "renders a successful response" do
      quiz_guess = QuizGuess.create! valid_attributes
      get quiz_guess_url(quiz_guess)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      pillar = Pillar.create!(name: "a")
      competency = Competency.create!(name: "b", pillar: pillar)
      level = Level.create!(name: "c")
      Behavior.create!(description: "behavior", competency: competency, level: level)
      get new_quiz_guess_url
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new QuizGuess" do
        expect {
          post quiz_guesses_url, params: { quiz_guess: valid_attributes }
        }.to change(QuizGuess, :count).by(1)
      end

      it "redirects to the created quiz_guess" do
        post quiz_guesses_url, params: { quiz_guess: valid_attributes }
        expect(response).to redirect_to(quiz_guess_url(QuizGuess.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new QuizGuess" do
        expect {
          post quiz_guesses_url, params: { quiz_guess: invalid_attributes }
        }.to change(QuizGuess, :count).by(0)
      end

      it "renders an unsuccessful response (i.e. a 422)" do
        post quiz_guesses_url, params: { quiz_guess: invalid_attributes }
        expect(response.code).to eq("422")
      end
    end
  end
end
