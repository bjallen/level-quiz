require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/levels", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # Level. As you add validations to Level, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { name: "level 1839" }
  }

  let(:invalid_attributes) {
    { name: nil }
  }

  describe "GET /index" do
    it "renders a successful response" do
      Level.create! valid_attributes
      get levels_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      level = Level.create! valid_attributes
      get level_url(level)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_level_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      level = Level.create! valid_attributes
      get edit_level_url(level)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Level" do
        expect {
          post levels_url, params: { level: valid_attributes }
        }.to change(Level, :count).by(1)
      end

      it "redirects to the created level" do
        post levels_url, params: { level: valid_attributes }
        expect(response).to redirect_to(level_url(Level.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Level" do
        expect {
          post levels_url, params: { level: invalid_attributes }
        }.to change(Level, :count).by(0)
      end

      it "renders an unsuccessful response (i.e. 422 Unprocessable Entity)" do
        post levels_url, params: { level: invalid_attributes }
        expect(response.code).to eq("422")
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        { name: "level 14555539" }
      }

      it "updates the requested level" do
        level = Level.create! valid_attributes
        patch level_url(level), params: { level: new_attributes }
        level.reload
        expect(level.id).to be_present
        expect(level.name).to eq("level 14555539")
      end

      it "redirects to the level" do
        level = Level.create! valid_attributes
        patch level_url(level), params: { level: new_attributes }
        level.reload
        expect(response).to redirect_to(level_url(level))
      end
    end

    context "with invalid parameters" do
      it "renders an unsuccessful response (i.e. 422 Unprocessable Entity)" do
        level = Level.create! valid_attributes
        patch level_url(level), params: { level: invalid_attributes }
        expect(response.code).to eq("422")
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested level" do
      level = Level.create! valid_attributes
      expect {
        delete level_url(level)
      }.to change(Level, :count).by(-1)
    end

    it "redirects to the levels list" do
      level = Level.create! valid_attributes
      delete level_url(level)
      expect(response).to redirect_to(levels_url)
    end
  end
end
